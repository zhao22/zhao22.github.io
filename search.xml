<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>jvm类文件的结构2-常量池与类访问的标志</title>
      <link href="/2019/08/08/jvm-8/"/>
      <url>/2019/08/08/jvm-8/</url>
      <content type="html"><![CDATA[<h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2><p>紧接着版本号的是常量池<br>常量池有以下几点特征：</p><ol><li><p>常量池是Class文件结构中与其他项目关联最多的数据类型</p></li><li><p>常量池是占用Class文件空间最大的数据项目之一  </p></li><li><p>常量池是Class文件中第一个出现的表类型数据项目</p></li></ol><h3 id="计数值"><a href="#计数值" class="headerlink" title="计数值"></a>计数值</h3><p>由于常量池中常量的数量是不固定的， 所以在常量池的入口需要放置一项u2类型的数据，代表常量池容量计数值(constant_pool_count)。与Java语言习惯不一样的是，这个容量计数是从1而不是0开始的。<br>制定Class文件格式规范时，将第0项常量空出来是有特殊考虑的：<br>某些指向常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量池项目”，就可以把索引值置为0来表示。<br>Class文件结构中只有常量池的容量计数是从1开始的，对于其他集合类型，包括接口索引集合、字段表集合、方法表集合等的容量计数都与一般习惯相同，是从0开始的。  </p><h3 id="字面量和符号引用"><a href="#字面量和符号引用" class="headerlink" title="字面量和符号引用"></a>字面量和符号引用</h3><p>常量池之中主要存放两大类常量：字面量(Literal)和符号引用(Symbolic References)。  </p><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>字面量比较接近于Java语言层面的常量概念，如文本字符串、被声明为final的常量值等。 </p><h4 id="符号引用"><a href="#符号引用" class="headerlink" title="符号引用"></a>符号引用</h4><p>符号引用主要属于编译原理方面的概念， 包括了下面三类常量：</p><ul><li><p>类和接口的全限定名(Fully Qualified Name)</p></li><li><p>字段的名称和描述符(Descriptor)</p></li><li><p>方法的名称和描述符</p></li></ul><p>Java代码在进行Javac编译的时候，并不像C和C++那样有“连接”这一步骤，而是在虚拟机加载Class文件的时候进行动态连接。<br>也就是说，在Class文件中不会保存各个方法和字段的最终内存布局信息，因此这些字段和方法的符号引用不经过转换的话是无法直接被虚拟机使用的。当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析并翻译到具体的内存地址之中。  </p><h3 id="常量表"><a href="#常量表" class="headerlink" title="常量表"></a>常量表</h3><p>常量池中的每一项常量都是一个表，共有11种结构各不相同的表结构数据，这11种表都有一个共同的特点，就是表开始的第一位是一个u1类型的标志位(tag，取值为1至12，缺少标志为2的数据类型)，代表当前这个常量属于哪种常量类型  </p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">标志</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">CONSTANT_Utf8_info</td><td style="text-align:center">1</td><td style="text-align:center">UTF-8编码的字符串</td></tr><tr><td style="text-align:center">CONSTANT_Integer_info</td><td style="text-align:center">3</td><td style="text-align:center">整型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Float_info</td><td style="text-align:center">4</td><td style="text-align:center">浮点型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Long_info</td><td style="text-align:center">5</td><td style="text-align:center">长整型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Double_info</td><td style="text-align:center">6</td><td style="text-align:center">双精度浮点型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Class_info</td><td style="text-align:center">7</td><td style="text-align:center">类或接口的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_String_info</td><td style="text-align:center">8</td><td style="text-align:center">字符串类型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Fieldref_info</td><td style="text-align:center">9</td><td style="text-align:center">字段的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_Methodref_info</td><td style="text-align:center">10</td><td style="text-align:center">类中方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_InterfaceMethodref_info</td><td style="text-align:center">11</td><td style="text-align:center">接口中方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_NameAndType_info</td><td style="text-align:center">12</td><td style="text-align:center">字段或方法的部分符号引用</td></tr></tbody></table><h4 id="常量表的具体内容"><a href="#常量表的具体内容" class="headerlink" title="常量表的具体内容"></a>常量表的具体内容</h4><table><br>  <tr><br>    <th>常量</th><br>    <th>项目</th><br>    <th>类型</th><br>    <th>描述</th><br>  </tr><br>  <tr><br>    <td colspan="3">CONSTANT_Utf8_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为1</td><br>  </tr><br>  <tr><br>    <td>length</td><br>    <td>u2</td><br>    <td>UTF-8编码的字符串占用了字节数</td><br>  </tr><br>  <tr><br>    <td>bytes</td><br>    <td>u1</td><br>    <td>长度为length的UTF-8编码的字符串</td><br>  </tr><br>  <tr><br>    <td colspan="2">CONSTANT_Integer_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为3</td><br>  </tr><br>  <tr><br>    <td>bytes</td><br>    <td>u4</td><br>    <td>按照高位在前存储的int值</td><br>  </tr><br>  <tr><br>    <td colspan="2">CONSTANT_Float_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为4</td><br>  </tr><br>  <tr><br>    <td>bytes</td><br>    <td>u4</td><br>    <td>按照高位在前存储的float值</td><br>  </tr><br>  <tr><br>    <td colspan="2">CONSTANT_Long_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为5</td><br>  </tr><br>  <tr><br>    <td>bytes</td><br>    <td>u8</td><br>    <td>按照高位在前存储的long值</td><br>  </tr><br>  <tr><br>    <td colspan="2">CONSTANT_Double_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为6</td><br>  </tr><br>  <tr><br>    <td>bytes</td><br>    <td>u8</td><br>    <td>按照高位在前存储的double值</td><br>  </tr><br>  <tr><br>    <td colspan="2">CONSTANT_Class_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为7</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向全限定名常量项的索引</td><br>  </tr><br>  <tr><br>    <td colspan="2">CONSTANT_String_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为8</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向字符串字面量的索引</td><br>  </tr><br>  <tr><br>    <td colspan="3">CONSTANT_Fieldref_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为9</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向声明字段的类或接口描述符CONSTANT_Class_info的索引项</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向字段描述符CONSTANT_NameAndType的索引项</td><br>  </tr><br>  <tr><br>    <td colspan="3">CONSTANT_Methodref_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为10</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向声明方法的类描述符CONSTANT_Class_info的索引项</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向字段描述符CONSTANT_NameAndType的索引项</td><br>  </tr><br>  <tr><br>    <td colspan="3">CONSTANT_InterfaceMethodref_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为11</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向声明方法的类描述符CONSTANT_Class_info的索引项</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向名称及类型描述符CONSTANT_NameAndType的索引项</td><br>  </tr><br>  <tr><br>    <td colspan="3">CONSTANT_NameAndType_info</td><br>    <td>tag</td><br>    <td>u1</td><br>    <td>值为12</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向该字段或方法名称常量项的索引</td><br>  </tr><br>  <tr><br>    <td>index</td><br>    <td>u2</td><br>    <td>指向该字段或方法描述符常量项的索引</td><br>  </tr><br></table><h3 id="javap-verbose"><a href="#javap-verbose" class="headerlink" title="javap -verbose"></a>javap -verbose</h3><p>我们可以使用javap -verbose来查看一个Class文件的字节码信息。  </p><h2 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h2><p>常量池之后的2个字节代表访问标志(access_flags)，这个标志用于识别一些类或接口层次的访问信息，包括:  </p><ul><li><p>这个Class是类还是接口</p></li><li><p>是否定义为public类型</p></li></ul><p>….</p><p>以下是Java中的访问标志:  </p><table><thead><tr><th style="text-align:center">标志名称</th><th style="text-align:center">标志值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">ACC_PUBLIC</td><td style="text-align:center">0x0001</td><td style="text-align:center">是否为public类型</td></tr><tr><td style="text-align:center">ACC_FINAL</td><td style="text-align:center">0x0010</td><td style="text-align:center">是否被声明为final，只有类可设置</td></tr><tr><td style="text-align:center">ACC_SUPER</td><td style="text-align:center">0x0020</td><td style="text-align:center">是否允许使用invokespecial字节码指令，JDK1.2之后编译出来的类这个标志为真</td></tr><tr><td style="text-align:center">ACC_INTERFACE</td><td style="text-align:center">0x0200</td><td style="text-align:center">标识这是一个接口</td></tr><tr><td style="text-align:center">ACC_ABSTRACT</td><td style="text-align:center">0x0400</td><td style="text-align:center">是否为abstract类型，对于接口或抽象类来说，这个值为真，其他类值为假</td></tr><tr><td style="text-align:center">ACC_SYNTHETIC</td><td style="text-align:center">0x1000</td><td style="text-align:center">标识这个类并非由用户代码产生的</td></tr><tr><td style="text-align:center">ACC_ANNOTATION</td><td style="text-align:center">0x2000</td><td style="text-align:center">标识这是一个注解</td></tr><tr><td style="text-align:center">ACC_ENUM</td><td style="text-align:center">0x4000</td><td style="text-align:center">标识这是一个枚举</td></tr></tbody></table><p>access_flags一共有32个标志位可以使用，当前只定义了其中的8个。<br>没有使用到的标志位要求一律为0。<br>这些标志位以或的方式集成到一起。</p>]]></content>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jvm类文件的结构1-魔数与Class文件的版本</title>
      <link href="/2019/08/08/jvm-7/"/>
      <url>/2019/08/08/jvm-7/</url>
      <content type="html"><![CDATA[<h2 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h2><p>每个Class文件的头4个字节称为魔数(Magic Number)，它的唯一作用是用于确定这个文件是否为一个能被虚拟机接受的Class文件。<br>很多文件存储标准中都使用魔数来进行身份识别，比如图片格式，如gif或jpeg等在文件头中都存有魔数。<br>使用魔数而不是扩展名来进行识别主要是基于安全考虑，因为文件扩展名可以自由地选择魔数值，只要这个魔数值还没有被广泛采用过而且不会引起混淆即可。<br>Class文件的魔数的获得很有”浪漫气息”，值为:  0xCAFEBABE<br>CA:202  FE:254  BA:186  BE:190</p><h2 id="Class文件的版本"><a href="#Class文件的版本" class="headerlink" title="Class文件的版本"></a>Class文件的版本</h2><p>紧接着魔数的4个字节存储的是Class文件的版本号: 第5和第6个字节的次版本号(Minor Version)，第7个和第8个字节是主版本号(Major Version)。<br>Java的版本号是从45开始的，JDK1.1之后的每个JDK大版本发布主版本号向上加1(JDK 1.0~1.1 使用了45.0~45.3的版本号)<br>高版本的JDK能向下兼容以前版本的Class文件，但不能运行以后版本的Class文件，即使文件格式并未发生变化。<br>如JDK1.1能支持版本号为46.0以上的Class，而JDK1.2则能支持45.0~46.65535的Class文件。  </p>]]></content>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jvm类文件的结构</title>
      <link href="/2019/08/08/jvm-6/"/>
      <url>/2019/08/08/jvm-6/</url>
      <content type="html"><![CDATA[<h2 id="Class类文件的结构"><a href="#Class类文件的结构" class="headerlink" title="Class类文件的结构"></a>Class类文件的结构</h2><p>Class 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部都是程序运行的必要数据，没有空隙存在。当遇到需要占用8位字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8位字节进行存储。  </p><h3 id="Class类的伪结构"><a href="#Class类的伪结构" class="headerlink" title="Class类的伪结构"></a>Class类的伪结构</h3><p>Class文件格式采用一种类似于C语言结构体的伪结构来存储，这种伪结构中只有两种数据类型: <strong>无符号数</strong>和<strong>表</strong>。  </p><h4 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h4><p>无符号数属于基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述<strong>数字</strong>、<strong>索引引用</strong>、<strong>数量值</strong>，或者按照UTF-8编码构成<strong>字符串值</strong>。  </p><h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>表是由多个无符号数或其他表作为数据项构成的复合数据类型，所有表都习惯性地以”_info”结尾。表用于描述有层次关系的复合结构的数据，整个Class文件本质上就是一张表。  </p><h4 id="Class格式"><a href="#Class格式" class="headerlink" title="Class格式"></a>Class格式</h4><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">名称</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td style="text-align:center">u4</td><td style="text-align:center">magic</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">minor_version</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">major_version</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">constant_pool_count</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">cp_info</td><td style="text-align:center">constant_pool</td><td style="text-align:center">constant_pool_count - 1</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">access_flags</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">this_class</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">super_class</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">interfaces_count</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">interfaces</td><td style="text-align:center">interfaces_count</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">fields_count</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">field_info</td><td style="text-align:center">fields</td><td style="text-align:center">fields_count</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">methods_count</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">method_info</td><td style="text-align:center">methods</td><td style="text-align:center">methods_count</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">attributes_count</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">attribute_info</td><td style="text-align:center">attributes</td><td style="text-align:center">attributes_count</td></tr></tbody></table><p>无论是无符号数还是表，当需要描述同一类型但数量不定的多个数据时，经常会使用一个前置的容量计数器加若干个连续的数据项的形式，这时候称这一系列连续的某一类型的数据为某一类型的集合。  </p>]]></content>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jvm内存分配</title>
      <link href="/2019/08/08/jvm-5/"/>
      <url>/2019/08/08/jvm-5/</url>
      <content type="html"><![CDATA[<h3 id="jvm内存分配简介"><a href="#jvm内存分配简介" class="headerlink" title="jvm内存分配简介"></a>jvm内存分配简介</h3><p>对象的内存分配，往大方向上讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地在栈上分配)，对象主要分配在新生代地Eden区上，如果启动了本地线程分配缓冲，将按线程优先优先在TLAB上分配。少数情况也可能会直接分配在老年代中，分配的规则并不是百分之百固定的，其细节取决于当前使用的是哪一种垃圾收集器组合，还有虚拟机中与内存相关的参数的设置。  </p><h3 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h3><p>大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够的空间进行分配时，虚拟机将发起一次Minor GC。  </p><h4 id="Minor-GC-与-Full-GC"><a href="#Minor-GC-与-Full-GC" class="headerlink" title="Minor GC 与 Full GC"></a>Minor GC 与 Full GC</h4><ul><li><p>新生代GC(Minor GC): 指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。  </p></li><li><p>老年代GC(Major GC/Full GC): 指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC (但非绝对的，在ParallelScavenge收集器的收集策略里就有直接进行Major GC的策略选择过程)。MajorGC的速度一般会比Minor GC 慢10倍以上。</p></li></ul><h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><p>所谓大对象就是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串及数组(笔者例子中的byte[]数组就是典型的大对象)。大对象对虚拟机的内存分配来说就是一个坏消息。(最坏的是”朝生夕灭”的”短命大对象”)，经常出现大对象容易导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来”安置”它们。  </p><h3 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h3><p>虚拟机给每个对象定义了一个对象年龄(Age)计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并将对象年龄设为1。对象在Survivor区中每熬过一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度(默认为15岁)时，就会被晋升到老年代中。  </p><h4 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h4><p>为了能更好地适应不同程序的内存状况，虚拟机并不总是要求对象的年龄必须达到MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无需等到MaxTenuringThreshold中要求的年龄。  </p><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>在发生Minor GC时，虚拟机会检测之前每次晋升到老年代的平均大小是否大于老年代的剩余空间大小，如果大于，则改为直接进行一次Full GC。如果小于，则查看HandlePromotionFailure设置是否允许担保失败；如果允许，那只会进行Minor GC；如果不允许，则也要改为进行一次Full GC。  </p><p>新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况时(最极端的就是内存回收后新生代中所有对象都存活)，就需要老年代进行分配担保，让Survivor无法容纳的对象直接进入老年代。  </p><p>老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来，在实际完成内存回收之前是无法明确知道的，所以只好 <strong>取之前每一次回收晋升到老年代对象容量的平均大小值</strong> 作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。  </p><p>取平均值进行比较其实仍然是一种动态概率的手段，也就是说如果某次 Minor GC 存活后的对象突增，远远高于平均值的话，依然会导致担保失败(Handle Promotion Failure)。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开。  </p>]]></content>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jvm垃圾收集算法</title>
      <link href="/2019/08/08/jvm-4/"/>
      <url>/2019/08/08/jvm-4/</url>
      <content type="html"><![CDATA[<h3 id="垃圾收集简介"><a href="#垃圾收集简介" class="headerlink" title="垃圾收集简介"></a>垃圾收集简介</h3><p>垃圾收集(Garbage Collection, GC),并不是Java语言的伴生产物，1960年诞生于MIT的Lisp是第一门真正使用内存动态分配和垃圾收集技术的语言。<br>GC主要关注三个重点:  </p><ol><li><p>哪些内存需要回收  </p></li><li><p>什么时候回收  </p></li><li><p>如何回收</p></li></ol><h3 id="哪些内存需要回收"><a href="#哪些内存需要回收" class="headerlink" title="哪些内存需要回收"></a>哪些内存需要回收</h3><p>目前针对哪些内存需要回收这个问题，主要有两种算法:  </p><ol><li><p>引用计数算法  </p></li><li><p>根搜索算法  </p></li></ol><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>很多教科书判断对象是否存活的算法是:<br>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；<br>任何时刻计数器都为0的对象就是不可能再被使用的。<br>Java中没有选用这种算法来管理内存，最主要的原因是它很难解决对象之间的相互循环引用的问题:<br>对象 objA 和 objB 都有字段instance，赋值令objA.instance = objB 及 objB.instance = objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为0，于是引用计数算法无法通知GC收集器回收它们。  </p><h4 id="根搜索算法"><a href="#根搜索算法" class="headerlink" title="根搜索算法"></a>根搜索算法</h4><p>再主流的商用程序语言中(Java 和 C#，Lisp)，都是使用根搜索算法(GC Roots Tracing) 判定对象是否存活的。  </p><p>这个算法的基本思路是通过一系列名为”GC ROOT”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。  </p><h5 id="GC-Roots对象"><a href="#GC-Roots对象" class="headerlink" title="GC Roots对象"></a>GC Roots对象</h5><p>在Java 语言里，可作为GC Roots的对象包括下面几种:  </p><ul><li><p>虚拟机栈(栈帧中的本地变量表)中的引用的对象。  </p></li><li><p>方法区中的类静态属性引用的对象。  </p></li><li><p>方法区中的常量引用的对象。</p></li><li><p>本地方法栈中方JNI(即一般说的Native方法)的引用的对象。  </p></li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>无论是通过引用计数算法判断对象的引用数量， 还是通过跟搜索算法判断对象的引用链是否可达，判定对象是否存活都与”引用”有关。<br>在JDK 1.2之前，Java中的引用的定义很传统: 如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。 这种定义很存粹，但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态，我们希望能描述这样一类对象:<br>当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。<br> 在JDK1.2之后，Java对引用的概念进行了扩充， 将引用分为强引用(Strong Reference)、软引用(Soft Reference)、弱引用(Weak Reference)、虚引用(Phantom Reference)四种，这四种引用强度依次逐渐减弱。  </p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>强引用就是指在程序代码中普遍存在的，类似”Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。  </p><h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><p>软引用用来描述一些还有用，但并非必需的对象。对于软引用关联的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。  </p><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2之后，提供了WeakReference类来实现弱引用。</p><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>虚引用也称为幽灵引用或者欢迎引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时受到一个系统通知。在JDK 1.2之后，提供了PhantomReference类来实现虚引用。</p><h3 id="什么时候回收"><a href="#什么时候回收" class="headerlink" title="什么时候回收"></a>什么时候回收</h3><p>在根搜索算法中不可达对象，也并非是”非死不可”的，这时候它们暂时处于”缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：  </p><ol><li>如果对象在进行根搜索后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize() 方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为”没有必要执行”。<br>如果这个对象被判定为有必要执行 finalize() 方法，那么这个对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低优先级的Finalizer线程去执行。这里所谓的”执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束。这样做的原因是，如果一个对象在 finalize() 方法中执行缓慢，或者发生了死循环(更极端的情况)，将很可能会导致F-Queue队列中的其他对象永久处于等待状态，甚至导致整个内存回收系统崩溃。  </li><li>finalize()方法是对像逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在 finalize() 中成功拯救自己 —— 只要重新与引用链上的一个对象建立关联即可，譬如把自己(this 关键字)赋值给某个类变量或对象的成员变量，那再第二次标记时它将被移除出”即将回收”的集合；如果这个时候对象还没有逃脱，那它将被回收。  </li></ol><h3 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h3><p>很多人认为方法区(或者HotSpot虚拟机中的永久代) 是没有垃圾收集的。Java虚拟机规范中确实说过可以不要求虚拟机再方法区实现垃圾收集，而且再方法区进行垃圾收集的”性价比”一般比较低：<br>在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70% ~ 95%的空间，而永久代的垃圾收集效率远低于此。<br>永久代的垃圾收集主要回收两部分内容:  </p><h4 id="废弃常量"><a href="#废弃常量" class="headerlink" title="废弃常量"></a>废弃常量</h4><p>回收废弃常量与回收Java堆中的对象非常相似。以常量池中字面量的回收为例，假如一个字符串”abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做”abc”的，换句话说是没有任何String对象引用常量池中的”abc”常量，也没有其他地方引用了这个字面量，如果在这时候发生内存回收，这个”abc”常量就会被回收掉。 常量池中的其他类(接口)、方法、字段的符号引用也与此类似。  </p><h4 id="无用的类"><a href="#无用的类" class="headerlink" title="无用的类"></a>无用的类</h4><p>判定一个常量是否是”废弃常量”比较简单，而要判定一个类是否是”无用的类”的条件则相对苛刻许多。类需要同时满足下面三个条件才能算是”无用的类”：  </p><ol><li><p>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。  </p></li><li><p>加载该类的ClassLoader已经被回收。  </p></li><li><p>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。  </p></li></ol><h3 id="如何回收-垃圾收集算法"><a href="#如何回收-垃圾收集算法" class="headerlink" title="如何回收(垃圾收集算法)"></a>如何回收(垃圾收集算法)</h3><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p>最基础的收集算法是”标记-清除”(Mark-Sweep)算法，如它的名字一样，算法分为”标记”和”清除”两个阶段:<br>首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是之前说明的标记判定。<br>它的主要缺点由两个:  </p><ol><li><p>效率问题，标记和清除过程的效率都不高。  </p></li><li><p>空间问题，标记清除后会产生大量不连续的内存碎片。空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。  </p></li></ol><h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>为了解决效率问题，一种称为”复制”(Copying)的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对其中的一块进行内存回收。内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半。<br>现在的商业虚拟机都采用这种收集算法来回收新生代，IBM的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的 Eden 空间和两块较小的 Survivor 空间。每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地拷贝到另外一块Survivor空间上，最后清理掉Eden和刚才用过地Survivor地空间。<br>HotSpot虚拟机默认Eden和Survivor的大小比例是8:1,也就是每次新生代中可用内存空间为整个新生代容量的90%(80%+10%)，只有10%的内存是会被”浪费”的。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存(这里指老年代)进行分配担保(Handle Promotion)。</p><h5 id="分配担保"><a href="#分配担保" class="headerlink" title="分配担保"></a>分配担保</h5><p>如果另外一块Survivor空间没有足够的空间存放上一次新生代收集下来的存活对象，这些对象将直接通过分配担保机制进入老年代。  </p><h4 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h4><p>复制收集算法在对象存活率较高时就要执行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的机端情况，所以在老年代一般不能直接选用这种算法。  </p><p>根据老年代的特点，有人提出了另外一种”标记-整理”(Mark-Compact)算法，标记过程仍然与”标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。  </p><h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>当前商业虚拟机的垃圾收集都采用”分代收集”(Generational Collection)算法，这种算法并没有什么新的思想，只是根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最合适的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要符出少量存活对象的复制成本就可以完成收集。 而老年代中因为对象存活率高，没有额外空间对它进行分配担保，就必须使用”标记-清理”或”标记-整理”算法来进行回收。  </p>]]></content>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java运行区域</title>
      <link href="/2019/08/08/jvm-2/"/>
      <url>/2019/08/08/jvm-2/</url>
      <content type="html"><![CDATA[<h3 id="Java运行区域简介"><a href="#Java运行区域简介" class="headerlink" title="Java运行区域简介"></a>Java运行区域简介</h3><p>Java虚拟机所管理的内存将会包括以下几个运行时的数据区域:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+----------------------------------------------------------+</span><br><span class="line">|                                                          |</span><br><span class="line">|       方法区        虚拟机栈     本地方法栈              |</span><br><span class="line">|    Method Area      VM Stack   Native Method Stack       |</span><br><span class="line">|                                                          |</span><br><span class="line">|                                                          |</span><br><span class="line">|        堆              程序计数器                        |</span><br><span class="line">|       Heap       Program Counter Register                |</span><br><span class="line">|                                                          |</span><br><span class="line">+----------------------------------------------------------+</span><br><span class="line">       |  |                       |   |</span><br><span class="line">     --    --                   --     --</span><br><span class="line">      \    /                     \     /</span><br><span class="line">       \  /                       \   /</span><br><span class="line">     执行引擎         ----&gt;     本地库接口     -----&gt;   本地方法库</span><br></pre></td></tr></table></figure><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器(Program Counter Register) 是一块较小的内存空间，它的作用可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里(<strong>仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现</strong>)，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。  </p><p>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器(对于多核处理器来说是一个内核)只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为<strong>线程私有</strong>的内存。</p><p>如果计数器正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；  </p><p>如果正在执行的是Native方法，这个计数器值则为空(Undefined)。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。  </p><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>与程序计数器一样，Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的，它的生命周期与线程相同。虚拟机描述的是Java方法执行的内存模型:  </p><p>每个方法被执行的时候都会同时创建一个栈帧(Stack Frame)用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。  </p><p>在Java虚拟机规范中，对这个区域规定了两种异常状况：  </p><ol><li><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；  </p></li><li><p>如果虚拟机栈可以动态扩展(当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈)，当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</p></li></ol><h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><p>局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址)。  </p><p>其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot)，其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈(Native Method Stacks)和虚拟机栈的区别:  </p><ol><li><p>虚拟机栈为虚拟机执行Java方法(也就是字节码)服务  </p></li><li><p>而本地方法栈则是为虚拟机使用到的Native方法服务  </p></li></ol><p>虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>对于大多数应用来说，Java堆(Java Heap) 是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。<br>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有的对象实例以及数组都要在堆上分配</span><br></pre></td></tr></table></figure><p>但是随着JIT编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生。所有的对象都分配在堆上也渐渐变得不是那么绝对了。  </p><p>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称作<strong>GC堆</strong>(Garbage Collected Heap)。  </p><p>如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java堆中还可以细分为:新生代和老年代;再细致一点的有Eden空间、From Survivor空间、 To Survivor空间等。<br>从内存分配的角度看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer, TLAB)。<br>不过，无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好的回收内存，或者更快的分配内存。  </p><p>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。<br>在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx 和-Xms控制)。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。  </p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区(Method Area)与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。<br>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap(非堆)，目的应该是与Java堆区分开来。  </p><p>Java虚拟机规范对这个区域的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。<br>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样”永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收成绩比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。在Sun公司的BUG列表中，曾出现过的若干个严重的BUG就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏。  </p><p>根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池(Runtime Constant Pool)是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池(Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。  </p><p>Java虚拟机对Class文件的每一部分(自然也包括常量池)的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。但对于运行时常量池，Java虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。  </p><p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备<strong>动态性</strong>，Java语言并不要求常量一定只能在编译期产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。</p><p>既然运行时常量池是方法区的一部分，自然会受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁的使用，而且也可能导致OutOfMemoryError异常出现。<br>在JDK 1.4中新加入了NIO(New Input/Output)类，引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。<br>本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存(包括RAM及SWAP区或者分页文件)的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制(包括物理上的和操作系统级的限制)，从而导致动态扩展时出现OutOfMemoryError异常。  </p>]]></content>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java技术体系简介</title>
      <link href="/2019/08/08/jvm-1/"/>
      <url>/2019/08/08/jvm-1/</url>
      <content type="html"><![CDATA[<h2 id="Java技术体系简介"><a href="#Java技术体系简介" class="headerlink" title="Java技术体系简介"></a>Java技术体系简介</h2><h3 id="广义"><a href="#广义" class="headerlink" title="广义"></a>广义</h3><p>广义上讲,Clojure、JRuby、Groovy等运行在Java虚拟机上的语言及其相关的程序都属于Java技术体系的一员。</p><h3 id="传统意义"><a href="#传统意义" class="headerlink" title="传统意义"></a>传统意义</h3><p>Sun官方定义的Java技术体系包括以下几个组成部分:  </p><ul><li><p>Java程序设计语言</p></li><li><p>各种硬件平台上的Java虚拟机  </p></li><li><p>Class文件格式  </p></li><li><p>Java API类库  </p></li><li><p>来自商业机构和开源社区的第三方Java类库  </p></li></ul><p>即: <strong>Java语言</strong>, <strong>Class文件规范</strong>, <strong>各种虚拟机</strong>, <strong>API及第三方类库</strong>。</p><p>JDK = Java语言 + Java虚拟机 + Java API类库  (支持Java程序开发的最小环境)<br>JRE =            Java虚拟机 + Java SE API子集 (支持Java程序运行的最小环境)</p><h3 id="Java-SE-API子集"><a href="#Java-SE-API子集" class="headerlink" title="Java SE API子集"></a>Java SE API子集</h3><p>Java SE API子集包括:  </p><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">类库</th></tr></thead><tbody><tr><td style="text-align:center">用户界面</td><td style="text-align:center">AWT, Swing, Java 2D</td></tr><tr><td style="text-align:center">相关技术</td><td style="text-align:center">Accessbility, Drag n Drop, Input Methods, Image I/O, Print Service, Sound</td></tr><tr><td style="text-align:center">集成库</td><td style="text-align:center">IDL, JDBC, JNDI, RMI, RMI.IIOP, Scripting</td></tr><tr><td style="text-align:center">其他基础库</td><td style="text-align:center">Beans, Intl Support, I/O, JMX, JNI, Math, Networking, Override Mechanism, Security, Serialization, Extension Mechanism, XML, JAXP</td></tr><tr><td style="text-align:center">语言和工具基础库</td><td style="text-align:center">lang and util, Collections, Concurrency Utilities, JAR, Logging, Management, Preferences API, Ref Objects, Reflection, Regular Expressions, Versioning, Zip,Instrument</td></tr><tr><td style="text-align:center">Java虚拟机</td><td style="text-align:center">Java Hotpot ClientVM, Java Hotpot Server VM</td></tr></tbody></table><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>JRE除了完全包括Java SE API, 还包括<strong>程序发布相关组件</strong>:  </p><p>Deployment, Java WEb Start, Java Plug-in</p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>JDK除了完全包括JRE, 还包括:  </p><ol><li><p><strong>Java语言</strong>(Java Language)</p></li><li><p><strong>工具及工具API</strong>(java, javac, javadoc, apt, jar, javap, JPDA, JConsole, Java VisualVM, Security, Int`l, RMI, IDL, Deploy, Monitoring, Troubleshoot, Scripting, JVM TI)</p></li></ol><h2 id="Java技术平台"><a href="#Java技术平台" class="headerlink" title="Java技术平台"></a>Java技术平台</h2><p>Java技术关注的重点业务领域来划分，Java技术体系可分为四个平台:</p><ol><li><p>Java Card: 支持一些Java小程序(Applets) 运行在小内存设备(如智能卡)上的平台。  </p></li><li><p>Java ME(Micro Edition): 支持Java程序运行在移动终端(手机、PDA)上的平台，对Java API有所精简, 并加入了针对移动终端的支持，这个版本以前称为J2ME。  </p></li><li><p>Java SE(Standard Edition): 支持面向桌面级应用(如Windows下的应用程序)的Java平台，提供了完整的Java核心API，这个版本以前称为J2SE。  </p></li><li><p>Java EE(Enterprise Edition): 支持使用多层架构的企业应用(如ERP、CRM应用)的Java平台，除了提供Java SE API外，还对其做了大量的扩充并提供了相关的部署支持，这个版本以前称为J2EE。  </p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的awk</title>
      <link href="/2019/08/08/shell-11/"/>
      <url>/2019/08/08/shell-11/</url>
      <content type="html"><![CDATA[<h2 id="awk工作模式简介"><a href="#awk工作模式简介" class="headerlink" title="awk工作模式简介"></a>awk工作模式简介</h2><p>awk是一个文本处理工具，主要用于处理数据并生成结果报告  </p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk 'BEGIN&#123;&#125;pattern&#123;commands&#125;END&#123;&#125;' file_name</span><br><span class="line">standard output | awk 'BEGIN&#123;&#125;pattern&#123;commands&#125;END&#123;&#125;'</span><br></pre></td></tr></table></figure><h3 id="语法格式解释"><a href="#语法格式解释" class="headerlink" title="语法格式解释"></a>语法格式解释</h3><table><thead><tr><th>语法格式</th><th>解释</th></tr></thead><tbody><tr><td>BEGIN{}</td><td>正式处理数据之前执行</td></tr><tr><td>pattern</td><td>匹配模式</td></tr><tr><td>{commands}</td><td>处理命令，可能多行</td></tr><tr><td>END{}</td><td>处理完所有匹配数据后执行</td></tr></tbody></table><h2 id="awk中的内置变量"><a href="#awk中的内置变量" class="headerlink" title="awk中的内置变量"></a>awk中的内置变量</h2><table><thead><tr><th>内置变量</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>整行内容</td></tr><tr><td>$1-$n</td><td>当前行的第1-n个字段</td></tr><tr><td>NF</td><td>当前行的字段个数，也就是有多少列</td></tr><tr><td>NR</td><td>当前行的行号，从1开始计数</td></tr><tr><td>FNR</td><td>多文件处理时，每个文件行号单独计数，都是从0开始</td></tr><tr><td>FS</td><td>输入字段分隔符。不指定默认以空格或tab分割</td></tr><tr><td>RS</td><td>输入行分隔符。默认回车换行</td></tr><tr><td>OFS</td><td>输出字段分隔符。默认为空格</td></tr><tr><td>ORS</td><td>输出行分隔符，默认为回车换行</td></tr><tr><td>FILENAME</td><td>当前输入的文件名字</td></tr><tr><td>ARGC</td><td>命令行参数个数</td></tr><tr><td>ARGV</td><td>命令行参数数组</td></tr></tbody></table><h2 id="printf的格式说明符"><a href="#printf的格式说明符" class="headerlink" title="printf的格式说明符"></a>printf的格式说明符</h2><table><thead><tr><th>格式符</th><th>含义</th></tr></thead><tbody><tr><td>%s</td><td>打印字符串</td></tr><tr><td>%d</td><td>打印十进制数字</td></tr><tr><td>%f</td><td>打印浮点数</td></tr><tr><td>%x</td><td>打印十六进制数</td></tr><tr><td>%o</td><td>打印八进制数</td></tr><tr><td>%e</td><td>打印数学的科学计数法形式</td></tr><tr><td>%c</td><td>打印单个字符的ASCII码</td></tr><tr><td>-</td><td>左对齐</td></tr><tr><td>+</td><td>右对齐</td></tr><tr><td>#</td><td>显示8进制在前面加0，显示16进制在前面加0x</td></tr></tbody></table><h2 id="关系运算匹配"><a href="#关系运算匹配" class="headerlink" title="关系运算匹配"></a>关系运算匹配</h2><table><thead><tr><th>关系运算符</th><th>含义</th></tr></thead><tbody><tr><td>~</td><td>匹配正则表达式</td></tr><tr><td>!~</td><td>不匹配正则表达式</td></tr></tbody></table><h2 id="字符串函数对照表"><a href="#字符串函数对照表" class="headerlink" title="字符串函数对照表"></a>字符串函数对照表</h2><table><thead><tr><th>函数名</th><th>解释</th><th>函数返回值</th></tr></thead><tbody><tr><td>length(str)</td><td>计算字符串长度</td><td>整数长度值</td></tr><tr><td>index(str1, str2)</td><td>在str1中查找str2的位置</td><td>返回值为位置索引，从1计数</td></tr><tr><td>tolower(str)</td><td>转换为小写</td><td>转换后的小写字符串</td></tr><tr><td>toupper(str)</td><td>转换为大写</td><td>转换后的大写字符串</td></tr><tr><td>substr(str,m,n)</td><td>从str的m个字符开始,截取n位</td><td>截取后的子串</td></tr><tr><td>split(str, arr, fs)</td><td>按fs切割字符串，结果保存arr</td><td>切割后的子串的个数</td></tr><tr><td>match(str, RE)</td><td>在str中按照RE查找, 返回位置</td><td>返回索引位置</td></tr><tr><td>sub(RE, RepStr, str)</td><td>在str中搜索符合RE的字串,将其替换为RepStr;只替换第一个</td><td>替换的个数</td></tr><tr><td>gsub(RE, RepStr, str)</td><td>在str中搜索符合RE的字串，将其替换为RepStr;替换所有</td><td>替换的个数</td></tr></tbody></table><h2 id="awk其他选项"><a href="#awk其他选项" class="headerlink" title="awk其他选项"></a>awk其他选项</h2><table><thead><tr><th>选项</th><th>解释</th></tr></thead><tbody><tr><td>-v</td><td>参数传递</td></tr><tr><td>-f</td><td>指定脚本文件</td></tr><tr><td>-F</td><td>指定分隔符</td></tr><tr><td>-V</td><td>查看awk的版本号</td></tr></tbody></table><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><p>假如有文本test.txt如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root     pts/1   192.168.1.100  Tue Feb 10 11:21   still logged in</span><br><span class="line">root     pts/1   192.168.1.100  Tue Feb 10 00:46 - 02:28  (01:41)</span><br><span class="line">root     pts/1   192.168.1.100  Mon Feb  9 11:41 - 18:30  (06:48)</span><br><span class="line">dmtsai   pts/1   192.168.1.100  Mon Feb  9 11:41 - 11:41  (00:00)</span><br><span class="line">root     tty1                   Fri Sep  5 14:09 - 14:10  (00:01)</span><br></pre></td></tr></table></figure><p>展示第一列:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure><p>显示/etc/passwd的账户(以:分隔)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | awk -F ':' '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure><p>如果显示账户和账户对应的shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | awk -F ':' '&#123;print $1"\t"$7&#125;'</span><br></pre></td></tr></table></figure><p>显示列头列尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd |awk  -F ':'  'BEGIN &#123;print "name,shell"&#125;  &#123;print $1","$7&#125; END &#123;print "blue,/bin/nosh"&#125;'</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name,shell</span><br><span class="line">root,/bin/bash</span><br><span class="line">daemon,/bin/sh</span><br><span class="line">bin,/bin/sh</span><br><span class="line">sys,/bin/sh</span><br><span class="line">....</span><br><span class="line">blue,/bin/nosh</span><br></pre></td></tr></table></figure><p>打印行号和列数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd |awk  -F ':'  'BEGIN &#123;count=0;print "name\t\tshell"&#125;  &#123;count=count+1;print count":"$1"\t\t"$7&#125; END &#123;print "count=", count&#125;'</span><br></pre></td></tr></table></figure><p>打印nologin的用户展示行号和列数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd |awk  -F ':'  'BEGIN &#123;count=0;print "name\t\tshell"&#125; /nologin/ &#123;count=count+1;print count":"$1"\t\t"$7&#125; END &#123;print "count=", count&#125;'</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的sed</title>
      <link href="/2019/08/08/shell-10/"/>
      <url>/2019/08/08/shell-10/</url>
      <content type="html"><![CDATA[<h2 id="sed简介"><a href="#sed简介" class="headerlink" title="sed简介"></a>sed简介</h2><p>sed(Stream Editor), 流编辑器。对标准输出或文件逐行进行处理。  </p><h3 id="sed的语法格式"><a href="#sed的语法格式" class="headerlink" title="sed的语法格式"></a>sed的语法格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stdout|sed[option] "pattern command"</span><br><span class="line">sed [option] "pattern command" file</span><br></pre></td></tr></table></figure><h2 id="sed参数列表"><a href="#sed参数列表" class="headerlink" title="sed参数列表"></a>sed参数列表</h2><table><thead><tr><th>选项</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>quiet/silent</td><td>经过sed处理过的行才会被列出来</td></tr><tr><td>-e</td><td>script</td><td>直接在命令行进行sed编辑，默认选项</td></tr><tr><td>-f</td><td>script-file</td><td>直接运行script-file内的sed命令</td></tr><tr><td>-r</td><td>redxp-extended</td><td>支持扩展正则表达式</td></tr><tr><td>-i</td><td></td><td>直接编辑源文件</td></tr></tbody></table><h2 id="sed中的编辑命令"><a href="#sed中的编辑命令" class="headerlink" title="sed中的编辑命令"></a>sed中的编辑命令</h2><table><thead><tr><th>类别</th><th>编辑命令</th><th>含义</th></tr></thead><tbody><tr><td>查询</td><td>p</td><td>打印</td></tr><tr><td>增加</td><td>a</td><td>行后追加</td></tr><tr><td>增加</td><td>i</td><td>行前追加</td></tr><tr><td>增加</td><td>r</td><td>将文件内容追加到匹配行后面</td></tr><tr><td>增加</td><td>w</td><td>匹配行写入外部文件</td></tr><tr><td>删除</td><td>d</td><td>删除</td></tr><tr><td>修改</td><td>s/old/new</td><td>将行内第一个old替换为new</td></tr><tr><td>修改</td><td>s/old/new/g</td><td>将行内全部的old替换为new</td></tr><tr><td>修改</td><td>s/old/new/2g</td><td>将行内前2个old替换为new</td></tr><tr><td>修改</td><td>s/old/new/ig</td><td>将行内old全部替换为new， 忽略大小写</td></tr></tbody></table><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><h3 id="替换-c"><a href="#替换-c" class="headerlink" title="替换(c)"></a>替换(c)</h3><h4 id="将第一行替换为shell"><a href="#将第一行替换为shell" class="headerlink" title="将第一行替换为shell"></a>将第一行替换为shell</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '1c shell' sed.txt</span><br></pre></td></tr></table></figure><h4 id="将第1-3行替换为java"><a href="#将第1-3行替换为java" class="headerlink" title="将第1-3行替换为java"></a>将第1-3行替换为java</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '1,3c java' sed.txt</span><br></pre></td></tr></table></figure><h4 id="嵌入正则表达式，-用-包住。替换所有包含win的行变为python"><a href="#嵌入正则表达式，-用-包住。替换所有包含win的行变为python" class="headerlink" title="嵌入正则表达式， 用 //包住。替换所有包含win的行变为python"></a>嵌入正则表达式， 用 //包住。替换所有包含win的行变为python</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '/win/c python' sed.txt</span><br></pre></td></tr></table></figure><h3 id="删除-d"><a href="#删除-d" class="headerlink" title="删除(d)"></a>删除(d)</h3><h4 id="删除第二行"><a href="#删除第二行" class="headerlink" title="删除第二行"></a>删除第二行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '2d' sed.txt</span><br></pre></td></tr></table></figure><h4 id="删除最后一行-表示最后一行"><a href="#删除最后一行-表示最后一行" class="headerlink" title="删除最后一行($表示最后一行)"></a>删除最后一行($表示最后一行)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '$d' sed.txt</span><br></pre></td></tr></table></figure><h4 id="删除1-3行"><a href="#删除1-3行" class="headerlink" title="删除1-3行"></a>删除1-3行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '1, 3d' sed.txt</span><br></pre></td></tr></table></figure><h3 id="插入-i"><a href="#插入-i" class="headerlink" title="插入(i)"></a>插入(i)</h3><h4 id="所有行之前插入"><a href="#所有行之前插入" class="headerlink" title="所有行之前插入#\"></a>所有行之前插入#\</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed 'i##' sed.txt</span><br></pre></td></tr></table></figure><h4 id="1-3行之前插入0000"><a href="#1-3行之前插入0000" class="headerlink" title="1-3行之前插入0000"></a>1-3行之前插入0000</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '1,3i0000' sed.txt</span><br></pre></td></tr></table></figure><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><h4 id="替换文本中的每一行的第一个0-为-9"><a href="#替换文本中的每一行的第一个0-为-9" class="headerlink" title="替换文本中的每一行的第一个0 为 9"></a>替换文本中的每一行的第一个0 为 9</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed 's/0/9/' sed.txt</span><br></pre></td></tr></table></figure><h4 id="替换文本中的所有0-为-9"><a href="#替换文本中的所有0-为-9" class="headerlink" title="替换文本中的所有0 为 9"></a>替换文本中的所有0 为 9</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed 's/0/9/g' sed.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的grep</title>
      <link href="/2019/08/08/shell-9/"/>
      <url>/2019/08/08/shell-9/</url>
      <content type="html"><![CDATA[<h2 id="grep-和-egrep"><a href="#grep-和-egrep" class="headerlink" title="grep 和 egrep"></a>grep 和 egrep</h2><p>egrep 和 grep -E 等价， 支持扩展正则表达式  </p><h3 id="基本正则和扩展正则"><a href="#基本正则和扩展正则" class="headerlink" title="基本正则和扩展正则"></a>基本正则和扩展正则</h3><p>扩展正则表达式与基础正则表达式的唯一区别在于： ? + () {} 这几个字符  </p><p>基础正则表达式中，如果需要? + () {} 表达特殊含义， 需要将他们转义  </p><p>扩展正则表达式中，如果需要? + () {} 不表达特殊含义，需要将他们转义</p><h2 id="grep-语法格式"><a href="#grep-语法格式" class="headerlink" title="grep 语法格式"></a>grep 语法格式</h2><ul><li><p>第一种形式: grep[option][pattern][file1,file2…]</p></li><li><p>第二种形式: command | grep [option][pattern]</p></li></ul><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-v</td><td>不显示匹配行信息</td></tr><tr><td>-i</td><td>搜索时忽略大小写</td></tr><tr><td>-n</td><td>显示行号</td></tr><tr><td>-r</td><td>递归搜索</td></tr><tr><td>-E</td><td>支持扩展正则表达式</td></tr><tr><td>-F</td><td>不按正则表达式匹配，按照字符串字面意思匹配</td></tr><tr><td>-A</td><td>查看匹配行及匹配行后几行的信息</td></tr><tr><td>-B</td><td>查看匹配行及匹配行前几行的信息</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的find</title>
      <link href="/2019/08/08/shell-8/"/>
      <url>/2019/08/08/shell-8/</url>
      <content type="html"><![CDATA[<h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [路径] [选项] [操作]</span><br></pre></td></tr></table></figure><h2 id="选项参数对照表"><a href="#选项参数对照表" class="headerlink" title="选项参数对照表"></a>选项参数对照表</h2><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-name</td><td>根据文件名查找</td></tr><tr><td>-iname</td><td>根据文件名查找(忽略大小写)</td></tr><tr><td>-perm</td><td>根据文件权限查找</td></tr><tr><td>-prune</td><td>该选项可以排除某些查找目录</td></tr><tr><td>-user</td><td>根据文件属主查找</td></tr><tr><td>-group</td><td>根据文件属组查找</td></tr><tr><td>-mtime -n \</td><td>+n</td><td>根据文件更改时间查找</td></tr><tr><td>-nogroup</td><td>查找无有效属组的文件</td></tr><tr><td>-nouser</td><td>查找无有效属主的文件</td></tr><tr><td>-newer file1 ! file2</td><td>查找更改时间比file1新但比file2旧的文件</td></tr><tr><td>-type</td><td>按文件类型查找</td></tr><tr><td>-size -n +n</td><td>按文件大小查找</td></tr><tr><td>-mindepth n</td><td>从n级子目录开始搜索</td></tr><tr><td>-maxdepth n</td><td>最多搜索到n级子目录</td></tr></tbody></table><h2 id="type"><a href="#type" class="headerlink" title="-type"></a>-type</h2><table><thead><tr><th>类别</th><th>含义</th></tr></thead><tbody><tr><td>f</td><td>文件</td></tr><tr><td>d</td><td>目录</td></tr><tr><td>c</td><td>字符设备文件</td></tr><tr><td>b</td><td>块设备文件</td></tr><tr><td>l</td><td>链接文件</td></tr><tr><td>p</td><td>管道文件</td></tr></tbody></table><h2 id="size"><a href="#size" class="headerlink" title="-size"></a>-size</h2><table><thead><tr><th>类别</th><th>含义</th></tr></thead><tbody><tr><td>+n</td><td>大小大于n</td></tr><tr><td>-n</td><td>大小小于n</td></tr></tbody></table><h2 id="mtime"><a href="#mtime" class="headerlink" title="-mtime"></a>-mtime</h2><table><thead><tr><th>类别</th><th>含义</th></tr></thead><tbody><tr><td>-time</td><td>time天以内的文件</td></tr><tr><td>+time</td><td>time天以外的文件</td></tr></tbody></table><h2 id="find-locate-whereis-which的区别"><a href="#find-locate-whereis-which的区别" class="headerlink" title="find locate whereis which的区别"></a>find locate whereis which的区别</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>在磁盘中查找对应文件</p><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><h4 id="文件查找命令，所属软件包mlocate"><a href="#文件查找命令，所属软件包mlocate" class="headerlink" title="文件查找命令，所属软件包mlocate"></a>文件查找命令，所属软件包mlocate</h4><h4 id="不同于find命令再整块磁盘中搜索，locate命令在数据库文件中查找"><a href="#不同于find命令再整块磁盘中搜索，locate命令在数据库文件中查找" class="headerlink" title="不同于find命令再整块磁盘中搜索，locate命令在数据库文件中查找"></a>不同于find命令再整块磁盘中搜索，locate命令在数据库文件中查找</h4><ol><li>数据库文件一般每日更新，也可通过命令(updatedb)即时更新。  </li><li>用户更新/var/lib/mlocate/mlocate.db  </li><li>所使用配置文件/etc/updatedb.conf  </li><li>该任务在后台cron计划任务中定期执行</li></ol><h4 id="find是默认全部匹配，locate则是默认部分匹配"><a href="#find是默认全部匹配，locate则是默认部分匹配" class="headerlink" title="find是默认全部匹配，locate则是默认部分匹配"></a>find是默认全部匹配，locate则是默认部分匹配</h4><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p>只能查询二进制文件，帮助文档文件，源代码文件。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>只返回二进制文件</td></tr><tr><td>-m</td><td>只返回帮助文档文件</td></tr><tr><td>-s</td><td>只返回源代码文件</td></tr></tbody></table><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><p>仅查找二进制程序文件</p>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的函数</title>
      <link href="/2019/08/08/shell-7/"/>
      <url>/2019/08/08/shell-7/</url>
      <content type="html"><![CDATA[<h2 id="函数简介"><a href="#函数简介" class="headerlink" title="函数简介"></a>函数简介</h2><p>shell中函数的定义格式如下:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[function] funname [()]</span><br><span class="line">&#123;</span><br><span class="line">    action;</span><br><span class="line"></span><br><span class="line">    [return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明:  </p><ol><li><p>可以带function fun() 定义，也可以直接fun()定义，不带任何参数。  </p></li><li><p>参数返回，可以显示加: return 返回， 如果不加， 将以最后一条命令运行结果，作为返回值。  return后跟数值n(0-255)  </p></li></ol><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">demoFun() &#123;</span><br><span class="line">    echo "Hello World!"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demoFun</span><br></pre></td></tr></table></figure><p>执行结果:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的expr</title>
      <link href="/2019/08/08/shell-6/"/>
      <url>/2019/08/08/shell-6/</url>
      <content type="html"><![CDATA[<h2 id="expr简介"><a href="#expr简介" class="headerlink" title="expr简介"></a>expr简介</h2><p>expr命令是一个手工命令行计数器，用于在UNIX/LINUX下求表达式变量的值，一般用于整数值，也可用于字符串。  </p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr 表达式</span><br></pre></td></tr></table></figure><p>表达式说明:</p><ul><li><p>用空格隔开每个项</p></li><li><p>用/(反斜杠)放在shell特定的字符前面</p></li><li><p>对包含空格和其他特殊字符的字符串要用引号括起来</p></li></ul><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><h4 id="计算字符串长度"><a href="#计算字符串长度" class="headerlink" title="计算字符串长度"></a>计算字符串长度</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr length "this is a test"</span><br></pre></td></tr></table></figure><h4 id="抓取字串"><a href="#抓取字串" class="headerlink" title="抓取字串"></a>抓取字串</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr substr "this is a test" 3 5</span><br></pre></td></tr></table></figure><h4 id="抓取第一个字符串出现的位置"><a href="#抓取第一个字符串出现的位置" class="headerlink" title="抓取第一个字符串出现的位置"></a>抓取第一个字符串出现的位置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr index "sarasara" a</span><br></pre></td></tr></table></figure><h4 id="整数数学运算"><a href="#整数数学运算" class="headerlink" title="整数数学运算"></a>整数数学运算</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr 14 % 9</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的有类型变量</title>
      <link href="/2019/08/08/shell-5/"/>
      <url>/2019/08/08/shell-5/</url>
      <content type="html"><![CDATA[<h2 id="有类型变量"><a href="#有类型变量" class="headerlink" title="有类型变量"></a>有类型变量</h2><p>shell本身是一种弱类型语言，但是可以通过预先设置类型对变量固定类型</p><h2 id="declare-和-typeset-命令"><a href="#declare-和-typeset-命令" class="headerlink" title="declare 和 typeset 命令"></a>declare 和 typeset 命令</h2><p>shell中使用declare和typeset为变量固定类型，他们是完全等价的，大概格式为:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare -命令 变量</span><br></pre></td></tr></table></figure><h2 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-r</td><td>将参数变为只读</td></tr><tr><td>-i</td><td>将参数设为整数</td></tr><tr><td>-a</td><td>将变量定义为数组</td></tr><tr><td>-f</td><td>显示此脚本之前定义过的所有函数及内容</td></tr><tr><td>-F</td><td>仅显示此脚本之前定义过的函数</td></tr><tr><td>-x</td><td>将脚本定义为环境变量</td></tr></tbody></table><h2 id="取消声明的变量"><a href="#取消声明的变量" class="headerlink" title="取消声明的变量"></a>取消声明的变量</h2><p>如果要取消一个变量的声明，可以将 - 替换成 + :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare +命令 变量</span><br></pre></td></tr></table></figure><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">static=1024</span><br><span class="line">declare -r static</span><br><span class="line">static=1024</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo5.sh: line 4: static: readonly variable</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的数组</title>
      <link href="/2019/08/08/shell-4/"/>
      <url>/2019/08/08/shell-4/</url>
      <content type="html"><![CDATA[<h2 id="shell中的数组"><a href="#shell中的数组" class="headerlink" title="shell中的数组"></a>shell中的数组</h2><p>数组中可以存放多个值。Bash Shell只支持一维数组(不支持多维数组)，初始化时不需要定义数组大小。<br>数组元素的下标由0开始。  </p><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><p>Shell数组用括号来表示，元素用空格符号分割开，语法格式如下:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value1 ... valuen)</span><br></pre></td></tr></table></figure><p>也可以使用下标来定义数组:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[2]=value2</span><br></pre></td></tr></table></figure><h2 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h2><p>读取数组的一般格式是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&#123;array_name[index]&#125;</span><br></pre></td></tr></table></figure><h3 id="读取数组中的所有元素"><a href="#读取数组中的所有元素" class="headerlink" title="读取数组中的所有元素"></a>读取数组中的所有元素</h3><p>使用@或*可以获取数组中的所有元素，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&#123;array_name[@]&#125;</span><br><span class="line"><span class="meta">$</span>&#123;array_name[*]&#125;</span><br></pre></td></tr></table></figure><h2 id="读取数组的长度"><a href="#读取数组的长度" class="headerlink" title="读取数组的长度"></a>读取数组的长度</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&#123;#array_name[@]&#125;</span><br><span class="line"><span class="meta">$</span>&#123;#array_name[*]&#125;</span><br></pre></td></tr></table></figure><h2 id="删除数组"><a href="#删除数组" class="headerlink" title="删除数组"></a>删除数组</h2><p>在Shell中，使用unset关键字来删除数组元素，格式如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset array_name[index]</span><br></pre></td></tr></table></figure><p>如果不写下标，则会删除整个数组:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset array_name</span><br></pre></td></tr></table></figure><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">array=(A B C D)</span><br><span class="line">echo $&#123;array&#125;</span><br><span class="line">echo $&#123;array[0]&#125;</span><br><span class="line">echo "the first element of array is $&#123;array[0]&#125;"</span><br><span class="line">echo $&#123;array[@]&#125;</span><br><span class="line">echo $&#123;array[*]&#125;</span><br><span class="line">echo $&#123;#array[@]&#125;</span><br><span class="line">unset array[2]</span><br><span class="line">echo $&#123;array[@]&#125;</span><br><span class="line">echo $&#123;array[2]&#125;</span><br><span class="line">echo $&#123;#array[@]&#125;</span><br><span class="line"><span class="meta">#</span> 注意array[2]被移除后，array的长度减少为3，但3的位置仍然空着，导致循环不会输出D</span><br><span class="line">for ((i=0;i&lt;$&#123;#array[@]&#125;;i++));</span><br><span class="line">do</span><br><span class="line">echo $&#123;array[i]&#125;;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">A</span><br><span class="line">the first element of array is A</span><br><span class="line">A B C D</span><br><span class="line">A B C D</span><br><span class="line">4</span><br><span class="line">A B D</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的循环</title>
      <link href="/2019/08/08/shell-3/"/>
      <url>/2019/08/08/shell-3/</url>
      <content type="html"><![CDATA[<h2 id="for循环的写法"><a href="#for循环的写法" class="headerlink" title="for循环的写法"></a>for循环的写法</h2><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1;i&lt;5;i++));</span><br><span class="line">do</span><br><span class="line">echo $i;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 5)</span><br><span class="line">do</span><br><span class="line">echo $i;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;1..10&#125;</span><br><span class="line">do</span><br><span class="line">echo $i;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list="rootfs usr data data2"</span><br><span class="line">for i in $list;</span><br><span class="line">do</span><br><span class="line">echo $i is appoint;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in f1 f2 f3;</span><br><span class="line">do</span><br><span class="line">echo $i is appoint;</span><br><span class="line">done;</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int=1</span><br><span class="line"><span class="meta">while(($</span>int &lt;=5))</span><br><span class="line">do</span><br><span class="line">echo $int</span><br><span class="line">let "int++"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><p>猜数字游戏:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>用脚本演示使用结束标记控制while循环实现猜1~10内的数</span><br><span class="line">echo "Please input the num (1~~10): "</span><br><span class="line">read num</span><br><span class="line">while [[ $num != 4 ]]</span><br><span class="line">do</span><br><span class="line">if [ $num -lt 4 ];then</span><br><span class="line">  echo "Too small,Try again.."</span><br><span class="line">  read num</span><br><span class="line">elif [ $num -gt 4 ];then</span><br><span class="line">  echo "Too big,Try again.."</span><br><span class="line">  read num</span><br><span class="line">else</span><br><span class="line">  exit 0</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">echo "Yes,you are right !!"</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Please input the num (1~~10):  </span><br><span class="line">3</span><br><span class="line">Too small,Try again..</span><br><span class="line">6</span><br><span class="line">Too big,Try again..</span><br><span class="line">4</span><br><span class="line">Yes,you are right !!</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的字符串</title>
      <link href="/2019/08/07/shell-2/"/>
      <url>/2019/08/07/shell-2/</url>
      <content type="html"><![CDATA[<h2 id="字符串的声明"><a href="#字符串的声明" class="headerlink" title="字符串的声明"></a>字符串的声明</h2><p>shell中的字符串可以用单引号，也可以用双引号，也可以不用引号</p><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str='this is a string'</span><br></pre></td></tr></table></figure><p>单引号字符串的限制:</p><ul><li><p>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的  </p></li><li><p>单引号字串中不能出现单独一个的单引号(对单引号使用转义符后也不行)，但可成对出现，作为字符串拼接使用。  </p></li></ul><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str="this is a string"</span><br></pre></td></tr></table></figure><p>双引号的优点:  </p><ul><li><p>双引号里可以有变量</p></li><li><p>双引号里可以出现转义字符</p></li></ul><h2 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="abcd"</span><br><span class="line">echo $&#123;#string&#125;</span><br></pre></td></tr></table></figure><h2 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>${string:position}</td><td>从position位置开始</td></tr><tr><td>${string:position:length}</td><td>从position位置开始,匹配长度为length</td></tr><tr><td>${string:-position}</td><td>从右边开始匹配</td></tr><tr><td>${string:(position)}</td><td>从左边开始匹配</td></tr><tr><td>expr substr $string $position $length</td><td>从position位置开始,匹配长度为length</td></tr></tbody></table><p>以下脚本将输出string 从第12位开始，5位长度的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="Stopping by Woods on a Snowy Evening, Whose woods these are I think I know."</span><br><span class="line">echo %&#123;string:12:5&#125;</span><br></pre></td></tr></table></figure><h2 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h2><p>查找字符i或o的位置(哪个字母先出现就计算哪个):  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="Stopping by Woods on a Snowy Evening, Whose woods these are I think I know."</span><br><span class="line">echo `expr index "$string" io`</span><br></pre></td></tr></table></figure><p>注意: 以上脚本 `是反引号</p><h2 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>${变量名#匹配规则}</td><td>从变量开头进行规则匹配,将符合最短的数据删除</td></tr><tr><td>${变量名##匹配规则</td><td>从变量开头进行规则匹配,将符合最长的数据删除</td></tr><tr><td>${变量名%匹配规则}</td><td>从变量尾部进行规则匹配,将符合最短的数据删除</td></tr><tr><td>${变量名%%匹配规则}</td><td>从变量尾部进行规则匹配，将符合最长的数据删除</td></tr><tr><td>${变量名/旧字符串/新字符串}</td><td>变量内容符合旧字符串，则第一个旧字符串会被新字符串取代</td></tr><tr><td>${变量名//旧字符串/新字符串}</td><td>变量内容符合旧字符串，则全部的旧字符串会被新字符串取代</td></tr></tbody></table><h2 id="字符串的测试"><a href="#字符串的测试" class="headerlink" title="字符串的测试"></a>字符串的测试</h2><h2 id="变量测试"><a href="#变量测试" class="headerlink" title="变量测试"></a>变量测试</h2><p>变量测试表达式可以在变量为空或没有配置时返回特定的表达式，具体操作如下:</p><table><thead><tr><th>变量配置方式</th><th>str没有配置</th><th>Str为空字符串</th><th>Str已配置且非空</th></tr></thead><tbody><tr><td>var=${str-expr}</td><td>var=expr</td><td>var=</td><td>var=$str</td></tr><tr><td>var=${str=expr}</td><td>var=expr</td><td>var=</td><td>var=$str</td></tr><tr><td>var=${str:-expr}</td><td>var=expr</td><td>var=expr</td><td>var=$str</td></tr><tr><td>var=${str:=expr</td><td>var=expr</td><td>var=expr</td><td>var=$str</td></tr><tr><td>var=${str+expr}</td><td>var=</td><td>var=expr</td><td>var=expr</td></tr><tr><td>var=${str:+expr}</td><td>var=</td><td>var=</td><td>var=expr</td></tr></tbody></table><h2 id="表达式的命令替换"><a href="#表达式的命令替换" class="headerlink" title="表达式的命令替换"></a>表达式的命令替换</h2><p>表达式如 <strong>expr</strong> 会将结果输出到控制台，如果希望作为值，需要使用命令替换语句。语法为:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`expr`</span><br><span class="line"><span class="meta">$</span>(expr)</span><br></pre></td></tr></table></figure><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> !bin/bash</span><br><span class="line"><span class="meta">#</span> 单引号创建字符串</span><br><span class="line">str='Two roads diverged in a yellow wood,'</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta">#</span> 双引号创建字符串</span><br><span class="line">str="And sorry I could not travel both"</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta">#</span> 双引号拼接字符串</span><br><span class="line">var_and="And"</span><br><span class="line">str1=$var_and" sorry I could not travel both"</span><br><span class="line">str2="$var_and be one traveler, long I stood"</span><br><span class="line">echo $str1 $str2</span><br><span class="line"><span class="meta">#</span> 单引号拼接字符串</span><br><span class="line">str1=$var_and' looked down one as far as I could'</span><br><span class="line">str2='$var_and To where it bent in the undergrowth'</span><br><span class="line">echo $str1 $str2</span><br><span class="line"><span class="meta">#</span> 获取字符串的长度</span><br><span class="line">echo $&#123;#str1&#125;</span><br><span class="line"><span class="meta">#</span> 提取子字符串</span><br><span class="line">echo $&#123;str1:11:4&#125;</span><br><span class="line"><span class="meta">#</span> 查找子字符串</span><br><span class="line">echo `expr index "$str1" Aok`</span><br><span class="line"><span class="meta">#</span> 字符串的替换</span><br><span class="line">str='Two roads diverged in a yellow wood,'</span><br><span class="line">echo $&#123;str#*o&#125;</span><br><span class="line">echo $&#123;str##*o&#125;</span><br><span class="line">echo $&#123;str%o*&#125;</span><br><span class="line">echo $&#123;str%%o*&#125;</span><br><span class="line">echo $&#123;str/w/f&#125;</span><br><span class="line">echo $&#123;str//w/f&#125;</span><br><span class="line"><span class="meta">#</span> 变量的测试</span><br><span class="line">str_empty=""</span><br><span class="line">echo '-'</span><br><span class="line">echo $&#123;str_null-null&#125;</span><br><span class="line">echo $&#123;str_empty-null&#125;</span><br><span class="line">echo $&#123;str-null&#125;</span><br><span class="line">echo '='</span><br><span class="line">echo $&#123;str_null=null&#125;</span><br><span class="line">echo $&#123;str_empty=null&#125;</span><br><span class="line">echo $&#123;str=null&#125;</span><br><span class="line">echo ':-'</span><br><span class="line">echo $&#123;str_null:-null&#125;</span><br><span class="line">echo $&#123;str_empty:-null&#125;</span><br><span class="line">echo $&#123;str:-null&#125;</span><br><span class="line">echo ':='</span><br><span class="line">echo $&#123;str_null:=null&#125;</span><br><span class="line">echo $&#123;str_empty:=null&#125;</span><br><span class="line">echo $&#123;str:=null&#125;</span><br><span class="line">echo '+'</span><br><span class="line">echo $&#123;str_null+null&#125;</span><br><span class="line">echo $&#123;str_empty+null&#125;</span><br><span class="line">echo $&#123;str+null&#125;</span><br><span class="line">echo ':+'</span><br><span class="line">echo $&#123;str_null:+null&#125;</span><br><span class="line">echo $&#123;str_empty:+null&#125;</span><br><span class="line">echo $&#123;str:+null&#125;</span><br><span class="line"><span class="meta">#</span> 命令替换</span><br><span class="line">indexOfA=`expr index "$str1" A`</span><br><span class="line">indexOfo=$(expr index "$str1" o)</span><br><span class="line">echo $indexOfA</span><br><span class="line">echo $indexOfo</span><br></pre></td></tr></table></figure><p>测试结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Two roads diverged in a yellow wood,</span><br><span class="line">And sorry I could not travel both</span><br><span class="line">And sorry I could not travel both And be one traveler, long I stood</span><br><span class="line">And looked down one as far as I could $var_and To where it bent in the undergrowth</span><br><span class="line">37</span><br><span class="line">down</span><br><span class="line">1</span><br><span class="line">roads diverged in a yellow wood,</span><br><span class="line">d,</span><br><span class="line">Two roads diverged in a yellow wo</span><br><span class="line">Tw</span><br><span class="line">Tfo roads diverged in a yellow wood,</span><br><span class="line">Tfo roads diverged in a yellof food,</span><br><span class="line">-</span><br><span class="line">null</span><br><span class="line"></span><br><span class="line">Two roads diverged in a yellow wood,</span><br><span class="line">=</span><br><span class="line">null</span><br><span class="line"></span><br><span class="line">Two roads diverged in a yellow wood,</span><br><span class="line">:-</span><br><span class="line">null</span><br><span class="line">null</span><br><span class="line">Two roads diverged in a yellow wood,</span><br><span class="line">:=</span><br><span class="line">null</span><br><span class="line">null</span><br><span class="line">Two roads diverged in a yellow wood,</span><br><span class="line">+</span><br><span class="line">null</span><br><span class="line">null</span><br><span class="line">null</span><br><span class="line">:+</span><br><span class="line">null</span><br><span class="line">null</span><br><span class="line">null</span><br><span class="line">1</span><br><span class="line">6</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell中的变量</title>
      <link href="/2019/08/07/shell-1/"/>
      <url>/2019/08/07/shell-1/</url>
      <content type="html"><![CDATA[<h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><h3 id="基本定义方式"><a href="#基本定义方式" class="headerlink" title="基本定义方式"></a>基本定义方式</h3><p>定义shell变量时，直接使用 <strong>变量名=变量值</strong> 的格式就可以了，如下:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell_variable="some variable"</span><br></pre></td></tr></table></figure><p>注意： <strong>变量名和等号之间不能有空格</strong>  </p><h3 id="语句中赋值"><a href="#语句中赋值" class="headerlink" title="语句中赋值"></a>语句中赋值</h3><p>变量也可以直接在语句中赋值:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for skill in Ada Coffe Action Java:</span><br></pre></td></tr></table></figure><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ul><li><p>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头  </p></li><li><p>中间不能有空格，可以使用下划线(_)</p></li><li><p>不能使用标点符号</p></li><li><p>不能使用bash里的关键字</p></li></ul><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><p>使用一个定义过的变量，只要在变量名前加美元符号即可，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $shell_variable</span><br><span class="line">echo $&#123;shell_variable&#125;</span><br></pre></td></tr></table></figure><p>在使用括号时加上大括号主要是为了区分变量的边界，如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for skill in Ada Coffe Action Java;</span><br><span class="line">do</span><br><span class="line">  echo "I am goot at $&#123;skill&#125;Script"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>在这里如果不加大括号，shell将把skillScript当做变量名执行</p><h2 id="设置只读变量"><a href="#设置只读变量" class="headerlink" title="设置只读变量"></a>设置只读变量</h2><p>使用readonly命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myUrl="http://google.com"</span><br><span class="line">readonly myUrl</span><br></pre></td></tr></table></figure><h2 id="变量的删除"><a href="#变量的删除" class="headerlink" title="变量的删除"></a>变量的删除</h2><p>使用unset命令可以删除变量。语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset shell_variable</span><br></pre></td></tr></table></figure><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> !/bin/bash</span><br><span class="line"><span class="meta">#</span> 声明一个变量</span><br><span class="line">shell_variable="some variable"</span><br><span class="line"><span class="meta">#</span> 使用变量的两种方式</span><br><span class="line">echo $shell_variable</span><br><span class="line">echo $&#123;shell_variable&#125;</span><br><span class="line"><span class="meta">#</span> 用语句给变量赋值</span><br><span class="line">for skill in Ada Coffe Action Java;</span><br><span class="line">do</span><br><span class="line">  echo "I am goot at $&#123;skill&#125;Script"</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span> 只读变量</span><br><span class="line">myUrl="http://www.google.com"</span><br><span class="line">readonly myUrl</span><br><span class="line"><span class="meta">#</span> 删除变量</span><br><span class="line">unset shell_variable</span><br><span class="line">echo $shell_variable</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">some variable</span><br><span class="line">some variable</span><br><span class="line">I am goot at AdaScript</span><br><span class="line">I am goot at CoffeScript</span><br><span class="line">I am goot at ActionScript</span><br><span class="line">I am goot at JavaScript</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS切换阿里yum镜像源</title>
      <link href="/2019/08/06/linux-install-6-md/"/>
      <url>/2019/08/06/linux-install-6-md/</url>
      <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>CentOS6记得修改对应位置</p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux环境配置 </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS安装nginx</title>
      <link href="/2019/08/06/linux-install-5-md/"/>
      <url>/2019/08/06/linux-install-5-md/</url>
      <content type="html"><![CDATA[<h3 id="依赖项和必要组件"><a href="#依赖项和必要组件" class="headerlink" title="依赖项和必要组件"></a>依赖项和必要组件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y make cmake gcc gcc-c++  </span><br><span class="line"></span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line"></span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line"></span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><h3 id="下载安装nginx"><a href="#下载安装nginx" class="headerlink" title="下载安装nginx"></a>下载安装nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure><p>其他版本访问: <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.12.2.tar.gz &amp;&amp; cd nginx-1.12.2</span><br></pre></td></tr></table></figure><h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="创建全局命令"><a href="#创建全局命令" class="headerlink" title="创建全局命令"></a>创建全局命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</span><br></pre></td></tr></table></figure><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><h3 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux环境配置 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS安装Tomcat</title>
      <link href="/2019/08/06/linux-install-4-md/"/>
      <url>/2019/08/06/linux-install-4-md/</url>
      <content type="html"><![CDATA[<h3 id="下载解压tomcat"><a href="#下载解压tomcat" class="headerlink" title="下载解压tomcat"></a>下载解压tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.5/bin/apache-tomcat-9.0.5.tar.gz</span><br><span class="line">tar xvf apache-tomcat-9.0.5.tar.gz -C /usr/local/</span><br><span class="line">mv /usr/local/apache-tomcat-9.0.5/ /usr/local/tomcat/</span><br></pre></td></tr></table></figure><h3 id="Tomcat-目录结构说明"><a href="#Tomcat-目录结构说明" class="headerlink" title="Tomcat 目录结构说明"></a>Tomcat 目录结构说明</h3><table><thead><tr><th style="text-align:center">目录</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">bin</td><td style="text-align:center">启动命令目录</td></tr><tr><td style="text-align:center">conf</td><td style="text-align:center">配置文件目录</td></tr><tr><td style="text-align:center">lib</td><td style="text-align:center">库文件目录</td></tr><tr><td style="text-align:center">logs</td><td style="text-align:center">日志文件目录</td></tr><tr><td style="text-align:center">temp</td><td style="text-align:center">临时缓存文件</td></tr><tr><td style="text-align:center">webapps</td><td style="text-align:center">web应用目录</td></tr><tr><td style="text-align:center">work</td><td style="text-align:center">工作缓存目录</td></tr></tbody></table><h3 id="修改Tomcat环境变量"><a href="#修改Tomcat环境变量" class="headerlink" title="修改Tomcat环境变量"></a>修改Tomcat环境变量</h3><p>环境变量可以写在全局脚本中，但多个tomcat会有冲突。建议在 <strong>startup.sh</strong> 和 <strong>shutdown.sh</strong> 脚本前面加入以下内容:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export TOMCAT_HOME=/usr/local/tomcat</span><br><span class="line">export CATALINA_HOME=/usr/local/tomcat</span><br><span class="line">export CLASS_PATH=$JAVA_HOME/bin/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tool.jar</span><br><span class="line">export PATH=$PATH:/usr/local/java/bin:/usr/local/tomcat/bin</span><br></pre></td></tr></table></figure><h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><h3 id="查看进程状态"><a href="#查看进程状态" class="headerlink" title="查看进程状态"></a>查看进程状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep 'tomcat' | grep -v grep</span><br></pre></td></tr></table></figure><h3 id="关闭tomcat"><a href="#关闭tomcat" class="headerlink" title="关闭tomcat"></a>关闭tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/bin/shutdown.sh</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure><p>pid是查看进程状态中查找出来的。</p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux环境配置 </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7安装Java</title>
      <link href="/2019/08/06/linux-install-3-md/"/>
      <url>/2019/08/06/linux-install-3-md/</url>
      <content type="html"><![CDATA[<h3 id="下载Java"><a href="#下载Java" class="headerlink" title="下载Java"></a>下载Java</h3><ol><li><p>访问 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>  </p></li><li><p>点击 <strong>Downloads</strong> , <strong>Accept License Agreement</strong>  </p></li><li><p>选择 <strong>Linux x64</strong> , <strong>jdk-***-x64.tar.gz</strong>  </p></li><li><p>下载途中暂停, 复制下载链接。  </p></li></ol><h3 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">mkdir Java</span><br><span class="line">cd Java</span><br></pre></td></tr></table></figure><p>此时将刚才的链接 wget 到Linux服务器上。  </p><h4 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-\*\*\*-x64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="重命名目录"><a href="#重命名目录" class="headerlink" title="重命名目录"></a>重命名目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv jdk1.8.0_171 jdk1.8</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><h4 id="添加系统环境变量"><a href="#添加系统环境变量" class="headerlink" title="添加系统环境变量"></a>添加系统环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/java/jdk1.8</span><br><span class="line">JRE_HOME=/usr/local/java/jdk1.8/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure><h4 id="读取新的配置"><a href="#读取新的配置" class="headerlink" title="读取新的配置"></a>读取新的配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="查看java版本"><a href="#查看java版本" class="headerlink" title="查看java版本"></a>查看java版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> java </tag>
            
            <tag> linux环境配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修改MySQL默认密码策略</title>
      <link href="/2019/08/06/linux-install-2-md/"/>
      <url>/2019/08/06/linux-install-2-md/</url>
      <content type="html"><![CDATA[<h3 id="修改密码策略"><a href="#修改密码策略" class="headerlink" title="修改密码策略"></a>修改密码策略</h3><h4 id="validate-password-policy"><a href="#validate-password-policy" class="headerlink" title="validate_password_policy"></a>validate_password_policy</h4><p>控制validate_password验证策略<br>0: LOW 1: MEDIUM 2:STRONG</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password_policy = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="validate-password-length"><a href="#validate-password-length" class="headerlink" title="validate_password_length"></a>validate_password_length</h4><p>密码长度的最小值(这个值最小是4)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password_length = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h4 id="validate-password-number-count"><a href="#validate-password-number-count" class="headerlink" title="validate_password_number_count"></a>validate_password_number_count</h4><p>密码中数字的最小个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password_number_count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="validate-password-mixed-case-count"><a href="#validate-password-mixed-case-count" class="headerlink" title="validate_password_mixed_case_count"></a>validate_password_mixed_case_count</h4><p>密码中大小写的最小个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> validate_password_mixed_case_count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="validate-password-special-char-count"><a href="#validate-password-special-char-count" class="headerlink" title="validate_password_special_char_count"></a>validate_password_special_char_count</h4><p>密码中特殊字符的最小个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> validate_password_special_char_count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="validate-password-dictionary-file"><a href="#validate-password-dictionary-file" class="headerlink" title="validate_password_dictionary_file"></a>validate_password_dictionary_file</h4><p>字典文件</p><h3 id="策略解释"><a href="#策略解释" class="headerlink" title="策略解释"></a>策略解释</h3><h4 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h4><p>校验级别最低，只校验密码长度，只要长度跟validate_password_length一样即可，默认长度是8位。  </p><h4 id="MEDIUM"><a href="#MEDIUM" class="headerlink" title="MEDIUM"></a>MEDIUM</h4><p>除了校验LOW的内容，还要校验数字个数，大小写个数，特殊字符个数。  </p><h4 id="STRONG"><a href="#STRONG" class="headerlink" title="STRONG"></a>STRONG</h4><p>除了校验MEDIUM的内容，还要校验密码中任意连续4个或以上的字符不得是字典中的单词。  </p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7 安装MySQL</title>
      <link href="/2019/08/06/linux-install-1-md/"/>
      <url>/2019/08/06/linux-install-1-md/</url>
      <content type="html"><![CDATA[<h3 id="下载MySQL源安装包"><a href="#下载MySQL源安装包" class="headerlink" title="下载MySQL源安装包"></a>下载MySQL源安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="安装MySQL源"><a href="#安装MySQL源" class="headerlink" title="安装MySQL源"></a>安装MySQL源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="检查MySQL源是否安装成功"><a href="#检查MySQL源是否安装成功" class="headerlink" title="检查MySQL源是否安装成功"></a>检查MySQL源是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep "mysql.*-community.*"</span><br></pre></td></tr></table></figure><h3 id="修改源，改变默认安装的MySQL版本"><a href="#修改源，改变默认安装的MySQL版本" class="headerlink" title="修改源，改变默认安装的MySQL版本"></a>修改源，改变默认安装的MySQL版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mysql-community.repo</span><br></pre></td></tr></table></figure><p>如果要使用5.6，就将5.6下方的 <strong>enabled=1</strong> ，其他的设为 <strong>enabled=0</strong> 。</p><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><h3 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h3 id="修改本地登录密码"><a href="#修改本地登录密码" class="headerlink" title="修改本地登录密码"></a>修改本地登录密码</h3><h4 id="查看MySQL密码"><a href="#查看MySQL密码" class="headerlink" title="查看MySQL密码"></a>查看MySQL密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'temporary password' /var/log/mysqld.log</span><br></pre></td></tr></table></figure><h4 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'MyNewPass1!'</span>;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span>=<span class="keyword">password</span>(<span class="string">'MyNewPass1!'</span>);</span><br></pre></td></tr></table></figure><p>或 5.7以上的版本使用:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'MyNewPass1!'</span>)<span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span> ;</span><br></pre></td></tr></table></figure><h4 id="检查密码"><a href="#检查密码" class="headerlink" title="检查密码"></a>检查密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%password%'</span>;</span><br></pre></td></tr></table></figure><h3 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'REMOTE_USER'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'MyNewPassword2!'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux环境配置 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springboot[2]mysql的配置及JPA的使用</title>
      <link href="/2019/07/23/springboot-2/"/>
      <url>/2019/07/23/springboot-2/</url>
      <content type="html"><![CDATA[<a id="more"></a><h3 id="mysql的配置"><a href="#mysql的配置" class="headerlink" title="mysql的配置"></a>mysql的配置</h3><p>首先在maven中引入依赖:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在配置文件中配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1/database_name?characterEncoding=utf-8&amp;useSSL=false</span></span><br></pre></td></tr></table></figure><h3 id="JPA的使用"><a href="#JPA的使用" class="headerlink" title="JPA的使用"></a>JPA的使用</h3><h4 id="基础配置使用"><a href="#基础配置使用" class="headerlink" title="基础配置使用"></a>基础配置使用</h4><p>首先在maven中引入依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在配置文件中设置(打印sql):  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jpa:</span><br><span class="line">  show-sql: true</span><br></pre></td></tr></table></figure><p>新建entity包并创建文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@DynamicUpdate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCategory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer categoryType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果类名和表名的关系不是驼峰转下划线的关系的话，我们可以使用@Table注解来配置表名:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_product_category"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCategory</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建repository包并创建Repository接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductCategoryRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">ProductCategory</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;ProductCategory&gt; <span class="title">findByCategoryTypeIn</span><span class="params">(List&lt;Integer&gt; categoryTypeList)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DynamicUpdate注解说明"><a href="#DynamicUpdate注解说明" class="headerlink" title="DynamicUpdate注解说明"></a>DynamicUpdate注解说明</h4><p>在实际业务场景中，我们经常会从数据库中查出一条数据，对其做一些修改后再更新数据库，如果我们更新时将原来的update_time传入，就会使数据库默认的update_time失效。<br>这时我们可以为entity类加上DynamicUpdate注解自动更新数据库时间。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@DynamicUpdate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCategory</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h4><p>我们可以写一个测试类来测试表的增删改查:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCategoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductCategoryRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOneTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProductCategory one = repository.findById(<span class="number">1</span>).orElse(<span class="keyword">null</span>);</span><br><span class="line">        Assert.assertNotNull(one);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProductCategory productCategory = <span class="keyword">new</span> ProductCategory();</span><br><span class="line">        productCategory.setCategoryName(<span class="string">"女生最爱"</span>);</span><br><span class="line">        productCategory.setCategoryType(<span class="number">3</span>);</span><br><span class="line">        repository.save(productCategory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProductCategory productCategory = <span class="keyword">new</span> ProductCategory();</span><br><span class="line">        productCategory.setCategoryId(<span class="number">2</span>);</span><br><span class="line">        productCategory.setCategoryName(<span class="string">"男生最爱"</span>);</span><br><span class="line">        productCategory.setCategoryType(<span class="number">3</span>);</span><br><span class="line">        repository.save(productCategory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByCategoryTypeInList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        List&lt;ProductCategory&gt; productCategories = repository.findByCategoryTypeIn(list);</span><br><span class="line">        Assert.assertNotEquals(productCategories.size(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><p><strong>如果编辑器报错</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Inferred type &apos;S&apos; for type parameter &apos;S&apos; is not within its bound;</span><br></pre></td></tr></table></figure><p>这是由于使用SpringBoot是2版本但直接调用了find方法如下:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProductCategory one = repository.findById(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这在SpringBoot 2.X中已经不允许了。  </p><ol><li><p>将版本换回1.5.4。  </p></li><li><p>写成以下形式:  </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProductCategory one = repository.findById(<span class="number">1</span>).orElse(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p><strong>如果编辑器报错</strong>:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Table &apos;sell.hibernate_sequence&apos; doesn&apos;t exist</span><br></pre></td></tr></table></figure><p>如果我们使用以下写法就会报错，这也是因为SpringBoot2.X使用了hibernate5导致的。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GeneratedValue</span></span><br></pre></td></tr></table></figure><ol><li><p>版本切换  </p></li><li><p>写成如下形式:  </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springboot[1]logback的使用与配置</title>
      <link href="/2019/07/10/springboot-1/"/>
      <url>/2019/07/10/springboot-1/</url>
      <content type="html"><![CDATA[<a id="more"></a><h3 id="日志框架的作用"><a href="#日志框架的作用" class="headerlink" title="日志框架的作用"></a>日志框架的作用</h3><ul><li>定制输出目标<br>可以选择输出到控制台或文件等  </li><li>定制输出格式<br>可以为输出内容配置公用的格式  </li><li>携带上下文信息<br>可以携带类信息，时间信息等上下文信息  </li><li>运行时选择性输出<br>可以只输出部分等级，部分类的日志  </li><li>灵活的配置<br>可以选择按天滚动等  </li><li>优异的性能<br>System.out.println会添加synchronized方法锁，会极大地影响系统性能  </li></ul><h3 id="logback所需jar包"><a href="#logback所需jar包" class="headerlink" title="logback所需jar包"></a>logback所需jar包</h3><p>springboot在spring-boot-starter-web中内嵌了logback的模块,所以不用额外引用包.若不使用springboot,需要导入如下两个包:  </p><ol><li><p>logback-core-xxx.jar  </p></li><li><p>logback-classic-xxx.jar  </p></li></ol><p>包的依赖关系可以使用如下指令来查看:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree</span><br></pre></td></tr></table></figure><h3 id="Spring-Test中使用Logback"><a href="#Spring-Test中使用Logback" class="headerlink" title="Spring Test中使用Logback"></a>Spring Test中使用Logback</h3><p>普通引入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LoggerTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"debug..."</span>); <span class="comment">// 系统默认的日志级别是info.这里不会打印</span></span><br><span class="line">        logger.info(<span class="string">"info..."</span>);</span><br><span class="line">        logger.error(<span class="string">"error..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lombok简化引入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"debug..."</span>);</span><br><span class="line">        log.info(<span class="string">"info..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h3><p>在resources目录下新建logback-spring.xml就可以对日志进行配置了。日志基本内容如下:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread]%c %M %L: %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- INFO及WARN等级输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileInfoLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表示忽略ERROR等级的输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--滚动策略(按时间滚动,默认按天滚动)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>./log/info-%d.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ERROR等级输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileErrorLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表示输出ERROR等级及以上的日志文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--滚动策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>./log/error-%d.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleLog"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"fileInfoLog"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"fileErrorLog"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常用pattern说明"><a href="#常用pattern说明" class="headerlink" title="常用pattern说明"></a>常用pattern说明</h4><table><thead><tr><th>pattern</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td>%d{pattern}</td><td style="text-align:center">日期</td></tr><tr><td>%m 或 %msg</td><td style="text-align:center">信息</td></tr><tr><td>%c{length}</td><td style="text-align:center">logger名,默认输出全路径,当length大于路径长度输出全路径,length为0只输出类名,否则输出路径首字母及类名</td></tr><tr><td>%M</td><td style="text-align:center">method</td></tr><tr><td>%L</td><td style="text-align:center">行号</td></tr><tr><td>%thread</td><td style="text-align:center">线程名称</td></tr><tr><td>%-5level</td><td style="text-align:center">等级</td></tr><tr><td>%n</td><td style="text-align:center">换行</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
